<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns="http://www.mulesource.org/schema/mule/bos/2.2"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:mule="http://www.mulesource.org/schema/mule/core/2.2"
            xmlns:schemadoc="http://www.mulesource.org/schema/mule/schemadoc/2.2"
            targetNamespace="http://www.mulesource.org/schema/mule/bos/2.2"
            elementFormDefault="qualified"
            attributeFormDefault="unqualified">

    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:import namespace="http://www.mulesource.org/schema/mule/core/2.2"
                schemaLocation="http://www.mulesource.org/schema/mule/core/2.2/mule.xsd" />
    <xsd:import namespace = "http://www.mulesource.org/schema/mule/schemadoc/2.2"
                schemaLocation = "http://www.mulesource.org/schema/mule/schemadoc/2.2/mule-schemadoc.xsd"/>

    <xsd:annotation>
        <xsd:documentation>BOS bpm</xsd:documentation>
        <xsd:appinfo>
            <schemadoc:short-name>Bos</schemadoc:short-name>
            <schemadoc:page-title>Bos Transport</schemadoc:page-title>
            <schemadoc:transport-features
            receiveEvents="false" dispatchEvents="false" responseEvents="true"
                                          requestEvents="false"
                                          transactions="false" streaming="false">
                <schemadoc:inboundMEPs in-only="${receiver}" in-optional-out="true" in-out="true"/>
                <schemadoc:outboundMEPs out-only="${dispatcher}" out-in="true" out-optional-in="true"/>
            </schemadoc:transport-features>
        </xsd:appinfo>
    </xsd:annotation>

    <xsd:element name="connector" type="bosConnectorType" substitutionGroup="mule:abstract-connector">
        <xsd:annotation>
            <xsd:documentation>
                BOS bpm
            </xsd:documentation>
        </xsd:annotation>
    </xsd:element>


    <xsd:complexType name="bosConnectorType">
    	<xsd:complexContent>
    		<xsd:extension base="mule:connectorType">
    			<!--
    				
    				TODO for simple property types you can just add xsd:attribute elements here
    				For complex properties with multiple values you can add custom elements and register
    				a definition parser with bosNamespaceHandler.
    				
    				For example -
    				
    				<xsd:attribute name="swizzleSize" type="mule:substitutableInt">
    				<xsd:annotation>
    				<xsd:documentation>
    				Sets the amount of swizzle available for your twizzle
    				</xsd:documentation>
    				</xsd:annotation>
    				</xsd:attribute>
    				
    				Note the type of the attribute is mule:substitutableInt.  For non-string simple
    				types you should use mule:substitutableBoolean, mule:substitutableLong, etc since
    				these types allow property placeholders to be used instead of the actual value.
    				The property can then be set according to the properties available to the MUle instance. i.e
    				
    				<bos:connector name="smallTwizzler" swizzlerSize="${small.swizzle}"/>
    				
    				where small.swizzle is set in a properties files or system property.  This makes it easy
    				to use the same config file for differnet environments such as Developement, UAT and Production
    				
    			-->

    			<xsd:sequence>
    				<xsd:element name="barFilePaths"
    					type="mule:listOrSetType" maxOccurs="1" minOccurs="0">
    				</xsd:element>
    			</xsd:sequence>
    			<xsd:attribute name="login" type="xsd:string"></xsd:attribute>
    			<xsd:attribute name="password" type="xsd:string"></xsd:attribute>
                <xsd:attribute name="bonitaEnvironmentPath" type="xsd:string"></xsd:attribute>
                <xsd:attribute name="jassFilePath" type="xsd:string"></xsd:attribute>
    			<xsd:attribute name="undeployUnlistedProcesses"
    				type="xsd:boolean">
    			</xsd:attribute>
    			<xsd:attribute name="redeployProcesses"
    				type="xsd:boolean">
    			</xsd:attribute>
    		</xsd:extension>
    	</xsd:complexContent>
    </xsd:complexType>

    <!--
    The following define endpoint elements for this transport. Attributes for the endpoint can be defined at the section
    at the bottom
    -->
    <xsd:element name="inbound-endpoint" type="inboundEndpointType" substitutionGroup="mule:abstract-inbound-endpoint"/>
    <xsd:complexType name="inboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:inboundEndpointType">
                <xsd:attributeGroup ref="addressAttributes"/>
                <xsd:attributeGroup ref="propertyAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="outbound-endpoint" type="outboundEndpointType" substitutionGroup="mule:abstract-outbound-endpoint"/>
    <xsd:complexType name="outboundEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:outboundEndpointType">
                <xsd:attributeGroup ref="addressAttributes"/>
                <xsd:attributeGroup ref="propertyAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="endpoint" type="globalEndpointType" substitutionGroup="mule:abstract-global-endpoint"/>
    <xsd:complexType name="globalEndpointType">
        <xsd:complexContent>
            <xsd:extension base="mule:globalEndpointType">
                <xsd:attributeGroup ref="addressAttributes"/>
                <xsd:attributeGroup ref="propertyAttributes"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:attributeGroup name="addressAttributes">
    <!--
        TODO define address attributes for this endpoints i.e. queue, host, port, etc
        <xsd:attribute name="foo" type="xsd:string"/>
    -->
    </xsd:attributeGroup>

    <xsd:attributeGroup name="propertyAttributes">
         <!--
        TODO define property attributes for this endpoint. These are properties that can configure the way the
        transport behaves but are not used to create the endpoint address.
        <xsd:attribute name="bar" type="xsd:string"/>
    -->
    </xsd:attributeGroup>


</xsd:schema>